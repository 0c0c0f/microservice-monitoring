- hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: yes


  vars_files:
    - variables.yml


  vars:
      kibana_basic_auth: "{{ attendee_user }}:{{ attendee_password  }}"


  pre_tasks:
    - name: Install Python2 to make Ansible work
      raw: sudo apt-get update && sudo apt-get -y install python-minimal


  post_tasks:
    - name: Get the local user
      command: whoami
      register: local_username
      delegate_to: 127.0.0.1
      become: false
    - name: Store the playbook run event in Elasticsearch so it can be used as an annotation
      uri:
        url: "{{elasticsearch_host}}events/deployment"
        body_format: json
        method: POST
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body:
          "@timestamp": "{{ ansible_date_time.iso8601 }}"
          application: configure_all
          system: ansible
          host: "{{ inventory_hostname }}"
          user: "{{ local_username.stdout }}"
        status_code: 201


  tasks:


    # System
    - name: Update and upgrade apt packages
      apt: upgrade=dist

    - name: Install NTP to avoid time drift and PIP to manage Python dependencies
      apt: name={{ item }} state=latest
      with_items:
        - ntp
        - ntpdate
        - python3-pip

    - name: Install the JRE
      apt: name=openjdk-8-jre-headless state=latest install_recommends=no

    - name: Install the pyOpenSSL library, so Ansible can use it to check TLS certificates
      pip: name=pyopenssl


    # Global Elasticsearch configuration
    - name: Register a global index template
      uri:
        url: "{{elasticsearch_host}}_template/template_global"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body:
          template: "*"
          settings:
            number_of_shards: 1
        status_code:
          - 201
          - 200
      run_once: true


    # Filebeat
    - name: Install Filebeat
      apt: deb={{ elastic_download }}/downloads/beats/filebeat/filebeat-{{ elastic_version }}-amd64.deb

    - name: Change the Filebeat configuration
      template: src=templates/filebeat.yml dest=/etc/filebeat/filebeat.yml

    - name: Restart Filebeat and make sure it autostarts
      service: name=filebeat state=restarted enabled=yes

    - name: Add a default index pattern using Filebeat and hide the X-Pack banner
      uri:
        url: "{{elasticsearch_host}}.kibana/doc/config:{{ elastic_version }}"
        body_format: json
        method: PUT
        user: "{{ elasticsearch_user }}"
        password: "{{ elasticsearch_password }}"
        body:
          type: config
          config:
            defaultIndex: "filebeat-*"
            "xPackMonitoring:showBanner": false
        status_code:
          - 201
          - 200
      run_once: true


    # Metricbeat
    - name: Install Metricbeat
      apt: deb={{ elastic_download }}/downloads/beats/metricbeat/metricbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Metricbeat configuration
      template: src=templates/metricbeat.yml dest=/etc/metricbeat/metricbeat.yml

    - name: Restart Metricbeat and make sure it autostarts
      service: name=metricbeat state=restarted enabled=yes


    # Packetbeat
    - name: Install Packetbeat
      apt: deb={{ elastic_download }}/downloads/beats/packetbeat/packetbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Packetbeat configuration
      template: src=templates/packetbeat.yml dest=/etc/packetbeat/packetbeat.yml

    - name: Restart Packetbeat and make sure it autostarts
      service: name=packetbeat state=restarted enabled=yes


    # Auditbeat
    - name: Install Auditbeat
      apt: deb={{ elastic_download }}/downloads/beats/auditbeat/auditbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Auditbeat configuration
      template: src=templates/auditbeat.yml dest=/etc/auditbeat/auditbeat.yml

    - name: Restart Auditbeat and make sure it autostarts
      service: name=auditbeat state=restarted enabled=yes


    # nginx
    - name: Install nginx
      apt: name=nginx state=latest

    - name: Add the certbot repository
      apt_repository: repo="ppa:certbot/certbot"

    - name: Install certbot and update the cache for the new PPA
      apt: name=python-certbot-nginx state=latest update_cache=yes

    - name: Add the hostname to the certificates to create
      set_fact:
        certificates:
          - "{{ inventory_hostname }}"

    - name: Add more domains to the frontend certificate
      set_fact:
        certificates:
          - "{{ inventory_hostname }}"
          - "{{ domain }}"
          - "www.{{ domain }}"
      when: inventory_hostname == "frontend." + domain

    - name: Add more domains to the monitor certificate
      set_fact:
        certificates:
          - "{{ inventory_hostname }}"
          - "kibana.{{ domain }}"
      when: inventory_hostname == "monitor." + domain

    - name: Create the certificate
      command: >
        certbot certonly --standalone --agree-tos --email admin@{{ domain }} -d {{ certificates | join(',') }}
        creates=/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem

    - name: Add crontab to renew certificates every second month on Sunday night
      cron: minute="30" hour="3" weekday="0" month="*/2" job="certbot renew >> /var/log//var/log/letsencrypt/renew.log"

    - name: Generate strong dhparams, but only if the file doesn't exist
      command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096 creates=/etc/ssl/certs/dhparam.pem

    - name: Set a global TLS configuration
      template: src=templates/tls.conf dest=/etc/nginx/tls.conf

    - name: Change the nginx configuration
      template: src=templates/nginx.conf dest=/etc/nginx/sites-available/default

    - name: Reload nginx and make sure it autostarts
      service: name=nginx state=reloaded enabled=yes

    - name: Check HTTP
      uri:
        url: "http://{{ inventory_hostname }}"
        follow_redirects: none
        status_code: 301
      register: response
      retries: 3
      delay: 2
      delegate_to: 127.0.0.1
      become: false

    - name: Fail if HTTP is not being redirected to HTTPS
      fail:
      when: response.status != 301

    - name: Check HTTPS
      openssl_certificate:
        path: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
        provider: assertonly
        issuer:
          O: Let's Encrypt
        has_expired: false
        subject_alt_name:
          - "DNS:{{ inventory_hostname }}"

    - name: Check HTTPS apex
      openssl_certificate:
        path: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
        provider: assertonly
        issuer:
          O: Let's Encrypt
        has_expired: false
        subject_alt_name:
          - "DNS:{{ domain }}"
      when: inventory_hostname == "frontend." + domain

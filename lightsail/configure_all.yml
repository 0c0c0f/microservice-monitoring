- hosts: all
  remote_user: ubuntu
  become: true
  gather_facts: no


  vars_files:
    - variables.yml


  pre_tasks:
    - name: Install Python2 to make Ansible work
      raw: sudo apt-get update && sudo apt-get -y install python-minimal


  tasks:


    # System
    - name: Update and upgrade apt packages
      apt: upgrade=dist

    - name: Install NTP to avoid time drift
      apt: name={{ item }} state=latest
      with_items:
        - ntp
        - ntpdate

    - name: Install the JRE
      apt: name=openjdk-8-jre-headless state=latest install_recommends=no


    # Global Elasticsearch configuration
    - name: Register a global index template
      command: >
        curl -XPUT "{{ elasticsearch_host }}/_template/template_global"
             -u "{{ elasticsearch_user }}:{{ elasticsearch_password }}"
             -H "Content-Type: application/json"
             -d '{"template": "*", "settings": {"number_of_shards": 1}}'
      run_once: true


    # Filebeat
    - name: Install Filebeat
      apt: deb={{ elastic_download }}/downloads/beats/filebeat/filebeat-{{ elastic_version }}-amd64.deb

    - name: Change the Filebeat configuration
      template: src=templates/filebeat.yml dest=/etc/filebeat/filebeat.yml

    - name: Restart Filebeat and make sure it autostarts
      service: name=filebeat state=restarted enabled=yes

    - name: Add Filebeat dashboard
      command: >
        /usr/share/filebeat/scripts/import_dashboards
        -es {{ elasticsearch_host }}
        -user {{ elasticsearch_user }}
        -pass {{ elasticsearch_password }}
      run_once: true

    - name: Add a default index pattern using Filebeat
      command: >
        curl -XPUT "{{ elasticsearch_host }}/.kibana/config/{{ elastic_version }}"
             -u "{{ elasticsearch_user }}:{{ elasticsearch_password }}"
             -H "Content-Type: application/json"
             -d '{"defaultIndex": "filebeat-*"}'
      run_once: true


    # Metricbeat
    - name: Install Metricbeat
      apt: deb={{ elastic_download }}/downloads/beats/metricbeat/metricbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Metricbeat configuration
      template: src=templates/metricbeat.yml dest=/etc/metricbeat/metricbeat.yml

    - name: Restart Metricbeat and make sure it autostarts
      service: name=metricbeat state=restarted enabled=yes

    - name: Add Metricbeat dashboard
      command: >
        /usr/share/metricbeat/scripts/import_dashboards
        -es {{ elasticsearch_host }}
        -user {{ elasticsearch_user }}
        -pass {{ elasticsearch_password }}
      run_once: true


    # Packetbeat
    - name: Install Packetbeat
      apt: deb={{ elastic_download }}/downloads/beats/packetbeat/packetbeat-{{ elastic_version }}-amd64.deb

    - name: Change the Packetbeat configuration
      template: src=templates/packetbeat.yml dest=/etc/packetbeat/packetbeat.yml

    - name: Restart Packetbeat and make sure it autostarts
      service: name=packetbeat state=restarted enabled=yes

    - name: Add Packetbeat dashboard
      command: >
        /usr/share/packetbeat/scripts/import_dashboards
        -es {{ elasticsearch_host }}
        -user {{ elasticsearch_user }}
        -pass {{ elasticsearch_password }}
      run_once: true


    # nginx
    - name: Install nginx
      apt: name=nginx state=latest

    - name: Add the certbot repository
      apt_repository: repo='ppa:certbot/certbot'

    - name: Install certbot and update the cache for the new PPA
      apt: name=python-certbot-nginx state=latest update_cache=yes

    - name: Create the certificate
      command: >
        certbot certonly --standalone --agree-tos --email admin@{{ domain }} -d {{ inventory_hostname }}
        creates=/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
      when: inventory_hostname != "frontend." + domain

    - name: Create the certificate plus the apex
      command: >
        certbot certonly --standalone --agree-tos --email admin@{{ domain }} -d {{ inventory_hostname }} -d {{ domain }}
        creates=/etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
      when: inventory_hostname == "frontend." + domain

    - name: Add crontab to renew certificates every second month on Sunday night
      cron: minute="30" hour="3" weekday="0" month="*/2" job="certbot renew >> /var/log//var/log/letsencrypt/renew.log"

    - name: Generate strong dhparams, but only if the file doesn't exist
      command: openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048 creates=/etc/ssl/certs/dhparam.pem

    - name: Change the nginx configuration
      template: src=templates/nginx.conf dest=/etc/nginx/sites-available/default

    - name: Add the apex
      replace:
        path: /etc/nginx/sites-available/default
        regexp: 'server_name {{ inventory_hostname }};'
        replace: 'server_name {{ inventory_hostname }} {{ domain }};'
      when: inventory_hostname == "frontend." + domain

    - name: Reload nginx and make sure it autostarts
      service: name=nginx state=reloaded enabled=yes
